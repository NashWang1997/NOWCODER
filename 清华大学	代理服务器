//https://www.nowcoder.com/practice/1284469ee94a4762848816a42281a9e0?tpId=40&tqId=21335&tPage=4&rp=4&ru=/ta/kaoyan&qru=/ta/kaoyan/question-ranking
#include <iostream>
using namespace std;

int place(char a[], char b[])
{
    int i;
    for (i=0; a[i]!='\0'&&b[i]!='\0'; ++i) {
        if (a[i]-b[i] < 0) return -1;
        if (a[i]-b[i] > 0) return 1;
    }
    if (a[i] != '\0') return 1;
    if (b[i] != '\0') return -1;
    return 0;
}

void Sort(char* proxy[], int n)
{
    int i, j;
    bool flag;
    for (i=0; i<n-1; ++i) {
        flag = false;
        for (j=n-1; j>i; --j) {
            if (place(proxy[j], proxy[j-1]) == -1) {
                char* tmp;
                tmp = proxy[j]; proxy[j] = proxy[j-1]; proxy[j-1] = tmp;
                flag = true;
            }
        }
        if (!flag) break;
    }
}

int Search(char* proxy[], char input[], int n)
{
    int start = 0, end = n-1, mid;
    while (start <= end) {
        mid = (start+end) / 2;
        int p = place(input, proxy[mid]);
        if (p == 0) return mid;
        if (p == 1) start = mid + 1;
        else end = mid - 1;
    }
    return -1;
}

int main()
{
    int n, m;
    while (cin >> n) {
        char* proxy[n];
        int i, j;
        for (i=0; i<n; ++i) {
            proxy[i] = new char[16];
            cin >> proxy[i];
        }
        Sort(proxy, n);
        cin >> m;
        char input[16];
        int flag[n];
        for (i=0; i<n; ++i) flag[i] = 0;
        int cnt = 0, result = 0;
        for (i=0; i<m; ++i) {
            cin >> input;
            int p = Search(proxy, input, n);
            if (p!=-1 && flag[p]==0) {
                if (n == 1) result = -1;
                else if (cnt+1 == n) {
                    for (j=0; j<n; ++j) flag[j] = 0;
                    flag[p] = 1;
                    cnt = 1;
                    result++;
                }
                else {
                    flag[p] = 1;
                    cnt++;
                }
            }
        }
        cout << result << endl;
    }
    return 0;
}
