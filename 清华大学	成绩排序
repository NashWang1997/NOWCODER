//https://www.nowcoder.com/practice/0383714a1bb749499050d2e0610418b1?tpId=40&tqId=21333&tPage=1&rp=1&ru=/ta/kaoyan&qru=/ta/kaoyan/question-ranking
#include <iostream>
#include <cstdlib>
using namespace std;

struct Info {
    char name[20];
    int point;
};

void Merge(Info info[], int low, int mid, int high, int method, Info tmp[])
{
    int i, k, j;
    for (k=low; k<=high; ++k) {
        tmp[k] = info[k];
    }
    for (i=low,j=mid+1,k=i; i<=mid&&j<=high; ++k) {
        if (method == 1) {
            if (tmp[i].point <= tmp[j].point)
                info[k] = tmp[i++];
            else
                info[k] = tmp[j++];
        }
        else {
            if (tmp[i].point >= tmp[j].point)
                info[k] = tmp[i++];
            else
                info[k] = tmp[j++];
        }
    }
    while (i <= mid) info[k++] = tmp[i++];
    while (j <= high) info[k++] = tmp[j++];
}

void MergeSort(Info info[], int low, int high, int method, Info tmp[])
{
    if (low < high) {
        int mid = (low + high) / 2;
        MergeSort(info, low, mid, method, tmp);
        MergeSort(info, mid+1, high, method, tmp);
        Merge(info, low, mid, high, method, tmp);
    }
}

int main()
{
    int n, method;
    while (scanf("%d%d", &n, &method) != EOF) {
        Info info[n];
        int i;
        for (i=0; i<n; ++i) {
            scanf("%s\t%d", &info[i].name, &info[i].point);
        }
        
        //sort the data
        Info tmp[n];
        MergeSort(info, 0, n-1, method, tmp);
        
        for (i=0; i<n; ++i) {
            printf("%s %d\n", info[i].name, info[i].point);
        }
    }
    return 0;
}
